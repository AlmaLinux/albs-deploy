---
- name: Install packages
  package:
    state: present
    name: "{{ packages }}"
  become: "yes"

- name: Check and install necessary pip packages
  pip:
    name: "{{ item }}"
    state: present
  loop:
    - PyJWT
  become: "yes"

- name: Install NVM
  shell: |
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/{{ nvm_version }}/install.sh | bash
  args:
    creates: "{{ ansible_env.HOME }}/.nvm"

- name: Check current Node.js version
  shell: |
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    node -v || echo none
  args:
    executable: /bin/bash
  register: node_check
  ignore_errors: yes

- name: Install Node.js version
  shell: |
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm install {{ node_version }}
    nvm use {{ node_version }}
  args:
    executable: /bin/bash
  when: node_version not in node_check.stdout

- name: Switch to Node.js version
  shell: |
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm use {{ node_version }}
  args:
    executable: /bin/bash
  when: node_version in node_check.stdout
  ignore_errors: yes

- name: Check Node.js version
  shell: |
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    node -v
  args:
    executable: /bin/bash
  register: result

- debug: var=result.stdout_lines

- name: Set albs_jwt when is not set via vars.yml
  tags:
    - jwt_tokens
    - albs_jwt_token
  block:
    - name: Generate ALBS JWT
      jwt_generator:
        target: albs
        secret: "{{ albs_jwt_secret }}"
        user_id: 1
      register: generated_albs_jwt
    - name: Set albs_jwt fact
      set_fact:
        albs_jwt: "{{ generated_albs_jwt.token }}"
      when: generated_albs_jwt is defined
  when: not albs_jwt_token

- name: Set albs_jwt when is set via vars.yml
  tags:
    - jwt_tokens
    - albs_jwt_token
  set_fact:
    albs_jwt: "{{ albs_jwt_token }}"
  when: albs_jwt_token

- name: Set alts_jwt when is not set via vars.yml
  tags:
    - jwt_tokens
    - alts_jwt_token
  block:
    - name: Generate ALTS JWT
      jwt_generator:
        target: alts
        secret: "{{ alts_jwt_secret }}"
        email: base_user@almalinux.org
      register: generated_alts_jwt
    - name: Set alts_jwt fact
      set_fact:
        alts_jwt: "{{ generated_alts_jwt.token }}"
      when: generated_alts_jwt is defined
  when: not alts_jwt_token

- name: Set alts_jwt when is set via vars.yml
  tags:
    - jwt_tokens
    - alts_jwt_token
  set_fact:
    alts_jwt: "{{ alts_jwt_token }}"
  when: alts_jwt_token

- name: Clone ALBS sources
  tags: clone-albs-sources
  git:
    repo: "{{ item.value }}"
    dest: "{{ sources_root }}/{{ item.key }}"
    clone: yes
    update: yes
    accept_hostkey: yes
    force: yes
    ssh_opts: "-o ForwardAgent=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
  with_dict: "{{ albs_repos }}"
  when:
    - not use_already_cloned_repos
    - beholder_enabled or (item.key != "repo-beholder")

- name: Update ALBS sources pushurl
  tags: update-albs-sources-pushurl
  git_config:
    repo: "{{sources_root}}/{{ item.key }}"
    name: remote.origin.pushurl
    value: "git@github.com:AlmaLinux/{{ item.key }}.git"
    scope: local
  with_dict: "{{ albs_repos }}"
  when:
    - not use_already_cloned_repos
    - beholder_enabled or (item.key != "repo-beholder")

- name: Sync ALBS sources to remote host
  synchronize:
    dest: "{{ sources_root }}"
    src: "{{ local_sources_root }}"
  when: use_already_cloned_repos and not use_local_connection

- name: Sync ALBS volumes to remote host
  synchronize:
    dest: "{{ volumes_root }}"
    src: "{{ local_volumes_root }}"
  when: use_already_cloned_repos and not use_local_connection

- name: Build NodeJS modules for albs-frontend
  shell: |
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    cd {{ sources_root }}/albs-frontend
    npm install
  args:
    executable: /bin/bash

- name: Create services folders
  file:
    name: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
    force: no
  with_items: "{{ created_directories }}"
