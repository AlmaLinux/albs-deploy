---

- name: Check if it's a clean installation
  stat:
    path: "{{ volumes_root }}/is_clean_installation"
  register: is_clean_installation

- name: Change pulp password
  community.docker.docker_container_exec:
    container: "{{ container_name_prefix }}_pulp_1"
    command: "bash -c 'pulpcore-manager reset-admin-password -p {{ pulp_password }}'"
  register: result
  until: result is succeeded
  retries: 10
  delay: 30
  when: is_clean_installation.stat.exists == False

- name: Enable pulp database external access
  community.docker.docker_container_exec:
    container: "{{ container_name_prefix }}_pulp_1"
    command: >-
      bash -c "
      if ! grep -q 'listen_addresses = \*' /var/lib/pgsql/data/postgresql.conf; then
        echo \"listen_addresses = '*'\" >> /var/lib/pgsql/data/postgresql.conf;
      fi &&
      if ! grep -q 'host all all 0.0.0.0/0 md5' /var/lib/pgsql/data/pg_hba.conf; then
        echo \"host all all 0.0.0.0/0 md5\" >> /var/lib/pgsql/data/pg_hba.conf;
      fi &&
      if ! grep -q 'host all all ::/0 md5' /var/lib/pgsql/data/pg_hba.conf; then
        echo \"host all all ::/0 md5\" >> /var/lib/pgsql/data/pg_hba.conf;
      fi &&
      runuser postgres -c 'echo \"ALTER USER postgres WITH PASSWORD '\''{{ pulp_password }}'\'';\" | /usr/bin/psql'"
  when: is_clean_installation.stat.exists == False

- name: Stop pulp container
  community.docker.docker_container:
    name: "{{ container_name_prefix }}_pulp_1"
    state: stopped
  when: is_clean_installation.stat.exists == False

- name: Start pulp container
  community.docker.docker_container:
    name: "{{ container_name_prefix }}_pulp_1"
    state: started
  when: is_clean_installation.stat.exists == False

- name: Bootstrap permissions
  community.docker.docker_container_exec:
    container: "{{ container_name_prefix }}_web_server_1"
    command: "bash -c 'source env/bin/activate && chmod +x scripts/bootstrap_permissions.py && python3 scripts/bootstrap_permissions.py || true'"
  when: is_clean_installation.stat.exists == False

- name: Activate user
  community.docker.docker_container_exec:
    container: "{{ container_name_prefix }}_web_server_1"
    command: "bash -c 'source env/bin/activate && chmod +x scripts/manage_users.py && python3 scripts/manage_users.py -e base_user@almalinux.org -t AlmaLinux_team --verify --superuser || true'"
  when: is_clean_installation.stat.exists == False

- name: Checking if PGP key exists on web_server
  tags: add_pgp_to_web_server
  ansible.builtin.uri:
    url: http://localhost:8088/api/v1/sign-keys/
    method: GET
    headers: 
      accept: application/json
      Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiYXVkIjpbImZhc3RhcGktdXNlcnM6YXV0aCJdLCJleHAiOjE3Nzc2Mjg0NjF9.epY7PC6dCmzNAmJ_H73GLb23wbBWJhjqOas39Q5dHDk
    return_content: true
  register: gpg_request_output

- name: Adding GPG key to the web_server
  tags: add_pgp_to_web_server
  ansible.builtin.uri:
    url: http://lab3:8088/api/v1/sign-keys/new/
    method: POST
    headers:
      accept: application/json
      Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiYXVkIjpbImZhc3RhcGktdXNlcnM6YXV0aCJdLCJleHAiOjE3Nzc2Mjg0NjF9.epY7PC6dCmzNAmJ_H73GLb23wbBWJhjqOas39Q5dHDk
      Content-Type: application/json
    body:
      name: test
      description: test
      keyid: A3CF0F0D715BF4F5
      fingerprint: A6ADA40E72F6C56ABDF1EA55A3CF0F0D715BF4F5
      public_url: string
      platform_id: 1
    body_format: json
    status_code:
      - 200 
      - 201
  when: gpg_request_output.json|length == 0 

- name: Bootstrap repositories
  community.docker.docker_container_exec:
    container: "{{ container_name_prefix }}_web_server_1"
    command: "bash -c 'source env/bin/activate && chmod +x scripts/bootstrap_repositories.py && python3 scripts/bootstrap_repositories.py -c reference_data/platforms.yaml'"
  register: result
  until: result is succeeded
  retries: 3
  delay: 60
  when: is_clean_installation.stat.exists == False

- name: Bootstrap flavours
  community.docker.docker_container_exec:
    container: "{{ container_name_prefix }}_web_server_1"
    command: "bash -c 'source env/bin/activate && chmod +x scripts/manage_flavours.py && python3 scripts/manage_flavours.py -c reference_data/platform_flavors.yaml'"
  when: is_clean_installation.stat.exists == False

- name: ensure file exists
  copy:
    content: ""
    dest: "{{ volumes_root }}/is_clean_installation"
    force: false
